syntax = "proto3";
package squad.liquidfarming.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "squad/liquidfarming/v1beta1/liquidfarming.proto";
import "squad/liquidfarming/v1beta1/params.proto";

option go_package = "github.com/cosmosquad-labs/squad/x/liquidfarming/types";

// Query defines the gRPC querier service.
service Query {
  // Params returns parameters of the module
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/squad/liquidfarming/v1beta1/params";
  }

  // LiquidFarms returns all liquid farms registered in params
  rpc LiquidFarms(QueryLiquidFarmsRequest) returns (QueryLiquidFarmsResponse) {
    option (google.api.http).get = "/squad/liquidfarming/v1beta1/liquidfarms";
  }

  // LiquidFarm returns the specific liquid farm
  rpc LiquidFarm(QueryLiquidFarmRequest) returns (QueryLiquidFarmResponse) {
    option (google.api.http).get = "/squad/liquidfarming/v1beta1/liquidfarms/{pool_id}";
  }

  // RewardsAuctions returns all rewards auctions
  rpc RewardsAuctions(QueryRewardsAuctionsRequest) returns (QueryRewardsAuctionsResponse) {
    option (google.api.http).get = "/squad/liquidfarming/v1beta1/pools/{pool_id}/rewards_auctions";
  }

  // RewardsAuction returns the specific rewards auction
  rpc RewardsAuction(QueryRewardsAuctionRequest) returns (QueryRewardsAuctionResponse) {
    option (google.api.http).get = "/squad/liquidfarming/v1beta1/pools/{pool_id}/rewards_auctions/{auction_id}";
  }

  // Bids returns all bids for the liquid farm
  rpc Bids(QueryBidsRequest) returns (QueryBidsResponse) {
    option (google.api.http).get = "/squad/liquidfarming/v1beta1/pools/{pool_id}/bids";
  }

  // MintRate returns the current mint rate.
  rpc MintRate(QueryMintRateRequest) returns (QueryMintRateResponse) {
    option (google.api.http).get = "/squad/liquidfarming/v1beta1/pools/{pool_id}/mint_rate";
  }

  // BurnRate returns the current burn rate.
  rpc BurnRate(QueryBurnRateRequest) returns (QueryBurnRateResponse) {
    option (google.api.http).get = "/squad/liquidfarming/v1beta1/pools/{pool_id}/burn_rate";
  }
}

// QueryLiquidFarmsRequest is the request type for the Query/LiquidFarms RPC method.
message QueryLiquidFarmsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryLiquidFarmsResponse is response type for the Query/LiquidFarms RPC method.
message QueryLiquidFarmsResponse {
  repeated LiquidFarmResponse liquid_farms = 1 [ (gogoproto.nullable) = false ];
}

// QueryLiquidFarmRequest is the request type for the Query/LiquidFarm RPC method.
message QueryLiquidFarmRequest {
  uint64 pool_id = 1;
}

// QueryLiquidFarmResponse is response type for the Query/LiquidFarm RPC method.
message QueryLiquidFarmResponse {
  LiquidFarmResponse liquid_farm = 1 [ (gogoproto.nullable) = false ];
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryRewardsAuctionsRequest is request type for the Query/RewardsAuctions RPC method.
message QueryRewardsAuctionsRequest {
  uint64 pool_id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryRewardsAuctionsResponse is response type for the Query/RewardsAuctions RPC method.
message QueryRewardsAuctionsResponse {
  repeated RewardsAuction reward_auctions = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


// QueryRewardsAuctionRequest is request type for the Query/RewardsAuction RPC method.
message QueryRewardsAuctionRequest {
  uint64 pool_id = 1;
  uint64 auction_id = 2;
}

// QueryRewardsAuctionResponse is response type for the Query/RewardsAuction RPC method.
message QueryRewardsAuctionResponse {
  RewardsAuction reward_auction = 1 [ (gogoproto.nullable) = false ];
}

// QueryBidsRequest is request type for the Query/Bids RPC method.
message QueryBidsRequest {
  uint64 pool_id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBidsResponse is response type for the Query/Bids RPC method.
message QueryBidsResponse {
  repeated Bid bids = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryMintRateRequest is request type for the Query/MintRate RPC method.
message QueryMintRateRequest {
  uint64 pool_id = 1;
}

// QueryMintRateResponse is response type for the Query/MintRate RPC method.
message QueryMintRateResponse {
  string mint_rate = 1
    [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryBurnRateRequest is request type for the Query/BurnRate RPC method.
message QueryBurnRateRequest {
  uint64 pool_id = 1;
}

// QueryBurnRateResponse is response type for the Query/BurnRate RPC method.
message QueryBurnRateResponse {
  string burn_rate = 1
    [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

//
// Custom response messages
//

// LiquidFarmResponse is response type for the Query/LiquidFarm RPC method.
message LiquidFarmResponse {
	uint64 pool_id = 1;
	
  string liquid_farm_reserve_address = 2;

  string lf_coin_denom = 3 [(gogoproto.customname) = "LFCoinDenom"];
  
  string min_farm_amount = 4
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];

  string min_bid_amount = 5
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];

  cosmos.base.v1beta1.Coin staked_coin = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
	
  cosmos.base.v1beta1.Coin queued_coin = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
}